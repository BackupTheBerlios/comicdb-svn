/**
 * ComicDB - overview you comics
 *
 * Copyright (C) 2006 -2007  Daniel Moos
 *
 * This program is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free Software 
 * Foundation; either version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with 
 * this program; if not, write to the Free Software Foundation, Inc., 51 Franklin 
 * St, Fifth Floor, Boston, MA 02110, USA
 */

package de.comicdb.util.calendar;


import de.comicdb.comicdbcore.util.DateUtil;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ComponentListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  <a href="mailto:Daniel.Moos@link-up.de">Daniel Moos</a>
 */
public class CalendarPanel extends JPanel implements ComponentListener {
    
    private GregorianCalendar cal = new GregorianCalendar(Locale.getDefault());
    /** Creates new form CalendarPanel */
    public CalendarPanel() {
        initComponents();
        jTable1.setDefaultRenderer(Object.class, new CalendarPanel.CalendarCellRenderer(cal));
        jComboBoxMonth.setModel(new CalendarPanel.CalendarMonthModel(cal));
        jScrollPane1.addComponentListener(this);
    }
    
    public void setDate(Date date) {
        cal.setTime(date);
        long diff = cal.getTime().getTime() - DateUtil.getNewDate().getTime();
        updateUI();
    }
    
    public Date getDate() {
        return cal.getTime();
    }
    
    public void addTableMouseListener(MouseListener listener) {
        jTable1.addMouseListener(listener);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jButtonbackYear = new javax.swing.JButton();
        jButtonbackMonth = new javax.swing.JButton();
        jButtonForwardMonth = new javax.swing.JButton();
        jButtonForwardYear = new javax.swing.JButton();
        jComboBoxMonth = new javax.swing.JComboBox();
        jLabelYear = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        setAutoscrolls(true);
        setPreferredSize(new java.awt.Dimension(390, 330));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jButtonbackYear.setText("<<");
        jButtonbackYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonbackYearActionPerformed(evt);
            }
        });
        jButtonbackYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButtonbackYearKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        jPanel1.add(jButtonbackYear, gridBagConstraints);

        jButtonbackMonth.setText("<");
        jButtonbackMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonbackMonthActionPerformed(evt);
            }
        });
        jButtonbackMonth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButtonbackMonthKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jButtonbackMonth, gridBagConstraints);

        jButtonForwardMonth.setText(">");
        jButtonForwardMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonForwardMonthActionPerformed(evt);
            }
        });
        jButtonForwardMonth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButtonForwardMonthKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jButtonForwardMonth, gridBagConstraints);

        jButtonForwardYear.setText(">>");
        jButtonForwardYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonForwardYearActionPerformed(evt);
            }
        });
        jButtonForwardYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButtonForwardYearKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jButtonForwardYear, gridBagConstraints);

        jComboBoxMonth.setRenderer(new CalendarPanel.CalendarMonthCellRenderer());
        jComboBoxMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMonthActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jComboBoxMonth, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        jPanel1.add(jLabelYear, gridBagConstraints);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/comicdb/comicdbcore/calendar.png")));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        jPanel1.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(jPanel1, gridBagConstraints);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 280));
        jScrollPane1.setWheelScrollingEnabled(false);
        jTable1.setModel(new CalendarPanel.CalendarModel(this.cal));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setFocusable(false);
        jTable1.setRowSelectionAllowed(false);
        jTable1.setShowHorizontalLines(false);
        jTable1.setShowVerticalLines(false);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(jPanel2, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        for (KeyListener l : super.getKeyListeners())
            l.keyPressed(evt);
    }//GEN-LAST:event_jTable1KeyPressed

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        for (KeyListener l : super.getKeyListeners())
            l.keyPressed(evt);
    }//GEN-LAST:event_jButton1KeyPressed

    private void jButtonForwardYearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonForwardYearKeyPressed
        for (KeyListener l : super.getKeyListeners())
            l.keyPressed(evt);
    }//GEN-LAST:event_jButtonForwardYearKeyPressed

    private void jButtonForwardMonthKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonForwardMonthKeyPressed
        for (KeyListener l : super.getKeyListeners())
            l.keyPressed(evt);
    }//GEN-LAST:event_jButtonForwardMonthKeyPressed

    private void jButtonbackMonthKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonbackMonthKeyPressed
        for (KeyListener l : super.getKeyListeners())
            l.keyPressed(evt);
    }//GEN-LAST:event_jButtonbackMonthKeyPressed

    private void jButtonbackYearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonbackYearKeyPressed
        for (KeyListener l : super.getKeyListeners())
            l.keyPressed(evt);
    }//GEN-LAST:event_jButtonbackYearKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setDate(DateUtil.getNewDate());
//        jComboBoxMonth.updateUI();
//        jTable1.updateUI();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
//        cal.setTime((Date)jTable1.getModel().getValueAt(jTable1.getSelectedRow(),jTable1.getSelectedColumn()));
        setDate((Date)jTable1.getModel().getValueAt(jTable1.getSelectedRow(),jTable1.getSelectedColumn()));
//        jComboBoxMonth.updateUI();
//        jTable1.updateUI();
    }//GEN-LAST:event_jTable1MouseClicked
        
    private void jButtonbackYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonbackYearActionPerformed
        ((CalendarModel)jTable1.getModel()).getCalendar().add(Calendar.YEAR, -1);
        setDate(((CalendarModel)jTable1.getModel()).getCalendar().getTime());
//        jTable1.updateUI();
//        jComboBoxMonth.updateUI();
    }//GEN-LAST:event_jButtonbackYearActionPerformed
    
    private void jButtonForwardYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonForwardYearActionPerformed
        ((CalendarModel)jTable1.getModel()).getCalendar().add(Calendar.YEAR, 1);
        setDate(((CalendarModel)jTable1.getModel()).getCalendar().getTime());
//        jTable1.updateUI();
//        jComboBoxMonth.updateUI();
    }//GEN-LAST:event_jButtonForwardYearActionPerformed
    
    private void jComboBoxMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMonthActionPerformed
//        jTable1.updateUI();
        setDate(((CalendarModel)jTable1.getModel()).getCalendar().getTime());
    }//GEN-LAST:event_jComboBoxMonthActionPerformed
    
    private void jButtonForwardMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonForwardMonthActionPerformed
        ((CalendarModel)jTable1.getModel()).getCalendar().add(Calendar.MONTH, 1);
        setDate(((CalendarModel)jTable1.getModel()).getCalendar().getTime());
//        jTable1.updateUI();
//        jComboBoxMonth.updateUI();
    }//GEN-LAST:event_jButtonForwardMonthActionPerformed
    
    private void jButtonbackMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonbackMonthActionPerformed
        ((CalendarModel)jTable1.getModel()).getCalendar().add(Calendar.MONTH, -1);
        setDate(((CalendarModel)jTable1.getModel()).getCalendar().getTime());
//        jTable1.updateUI();
//        jComboBoxMonth.updateUI();
    }//GEN-LAST:event_jButtonbackMonthActionPerformed
    
    private class CalendarMonthCellRenderer extends DefaultListCellRenderer {
        
        private String[] months = new String[] {"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember" };
        
        public CalendarMonthCellRenderer()  {
            super();
        }
        
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean hasFocus){
            if (value instanceof Integer) {
                Integer in = (Integer) value;
                value = months[in.intValue()];
            }
            return super.getListCellRendererComponent(list, value, index, isSelected, hasFocus);
        }
    }
    
    private class CalendarMonthModel extends DefaultComboBoxModel {
        private Calendar cal;
        
        
        public CalendarMonthModel(Calendar cal) {
            super();
            this.cal = cal;
        }
        
        public Object getElementAt(int index) {
            return new Integer(index);
        }
        
        public int getSize() {
            return 12;
        }
        
        public Object getSelectedItem() {
            if (cal == null)
                return new Integer(0);
            
            return new Integer(cal.get(Calendar.MONTH));
        }
        
        public void setSelectedItem(Object o) {
            cal.set(Calendar.MONTH, ((Integer)o).intValue());
        }
    }
    
    private class CalendarCellRenderer extends DefaultTableCellRenderer {
        
        private SimpleDateFormat sdf_d   = new SimpleDateFormat("d");
        private SimpleDateFormat sdf_M   = new SimpleDateFormat("M");
        private SimpleDateFormat sdf_dM   = new SimpleDateFormat("d.M");
        private SimpleDateFormat sdf_dMy = new SimpleDateFormat("d.M.y");
        private Calendar cal;
        public CalendarCellRenderer(Calendar cal) {
            super();
            this.cal = cal;
        }
        
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column ) {
            Object newValue = sdf_d.format((Date)value);
//            hasFocus = false;
            Component comp = super.getTableCellRendererComponent(table, newValue, isSelected, hasFocus, row, column);
            if (comp instanceof JLabel) {
                JLabel label  = (JLabel)comp;
                label.setHorizontalAlignment(JLabel.CENTER);
                
                if (isSelectedDay((Date)value)) {
                    isSelected = true;
                } else {
                    isSelected = false;
                }
                
                label.setBackground(UIManager.getDefaults().getColor("Table.background"));
                label.setForeground(UIManager.getDefaults().getColor("Table.foreground"));
                if (isSelected) {
                    label.setBackground(UIManager.getDefaults().getColor("Table.selectionBackground"));
                } else {
                    label.setBackground(UIManager.getDefaults().getColor("Table.background"));
                }
                
                if(!isToMonth((Date)value)) {
                    label.setForeground(Color.gray);
                }
                
                if (isToDay((Date)value)) {
                    label.setBackground(Color.yellow);
                }
            }
            return comp;
        };
        
        private boolean isToMonth(Date value) {
            String valStr = sdf_M.format(value);
            String nowStr = sdf_M.format(cal.getTime());
            if (valStr.equalsIgnoreCase(nowStr))
                return true;
            return false;
        }
        
        private boolean isToDay(Date value) {
            String valStr = sdf_dMy.format(value);
            String nowStr = sdf_dMy.format(DateUtil.getNewDate());
            if (valStr.equalsIgnoreCase(nowStr))
                return true;
            return false;
        }
        
        private boolean isSelectedDay(Date value) {
            String valueStr = sdf_dM.format(value);
            String nowStr  = sdf_dM.format(cal.getTime());
            if (valueStr.equalsIgnoreCase(nowStr))
                return true;
            return false;
            
        }
        
    }
    
    private class CalendarModel extends DefaultTableModel {
        
        private Calendar cal;
        
        private String[] days = new String[] { "Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"};
        private Date lastDate = DateUtil.getNewDate();
        
        public CalendarModel(Calendar cal) {
            super();
            this.cal = cal;
        }
        
        public Calendar getCalendar() {
            return cal;
        }
        
        public  Object getValueAt(int rowIndex, int columnIndex) {
            int calColumn = cal.get(Calendar.DAY_OF_WEEK) -1;
            int calRow    = cal.get(Calendar.WEEK_OF_MONTH) -1;
            GregorianCalendar newCal = new GregorianCalendar(Locale.getDefault());
            newCal.setTime(cal.getTime());
            
            GregorianCalendar firstDay = new GregorianCalendar(Locale.getDefault());
            firstDay.setTime(cal.getTime());
            firstDay.set(Calendar.DAY_OF_MONTH, 1);
            
            if (cal.getFirstDayOfWeek() == Calendar.MONDAY) {
                if (cal.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY)
                    calColumn = 6;
                else
                    calColumn--;
            }
            
            int firstDayOfWeek = firstDay.get(Calendar.DAY_OF_WEEK);
            if (firstDayOfWeek == Calendar.SUNDAY || firstDayOfWeek == Calendar.FRIDAY || firstDayOfWeek == Calendar.SATURDAY)
                calRow++;
            
            newCal.add(GregorianCalendar.WEEK_OF_YEAR, calRow * -1);
            newCal.add(GregorianCalendar.DAY_OF_YEAR, calColumn * -1);
            
            newCal.add(GregorianCalendar.WEEK_OF_YEAR, rowIndex);
            newCal.add(GregorianCalendar.DAY_OF_YEAR, columnIndex);
            
            if (lastDate != cal.getTime()) {
                jLabelYear.setText("" + cal.get(Calendar.YEAR));
                lastDate = cal.getTime();
            }
            
            
            return newCal.getTime();
        }
        
        public boolean isCellEditable(int row, int column) {
            return false;
        }
        
        public int getRowCount() {
            if (cal == null)
                return 0;
            
            return cal.getMaximum(Calendar.WEEK_OF_MONTH);
        }
        
        public int getColumnCount() {
            return 7;
        }
        
        public String getColumnName(int index) {
            return days[index];
        }
    }
    
    public static void main(String[] args) {
        JFrame frame = new JFrame();
        frame.add(new CalendarPanel());
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        
    }
    
    public void componentHidden(java.awt.event.ComponentEvent componentEvent) {
    }
    
    public void componentMoved(java.awt.event.ComponentEvent componentEvent) {
    }
    
    public void componentResized(java.awt.event.ComponentEvent componentEvent) {
        int headerheight = 0;
        if (jTable1.getTableHeader() != null)
            headerheight = jTable1.getTableHeader().getHeight();
        
        jTable1.setRowHeight((jScrollPane1.getHeight() - headerheight) / jTable1.getRowCount());
    }
    
    public void componentShown(java.awt.event.ComponentEvent componentEvent) {
        int headerheight = 0;
        if (jTable1.getTableHeader() != null)
            headerheight = jTable1.getTableHeader().getHeight();
        
        jTable1.setRowHeight((jScrollPane1.getHeight() - headerheight) / jTable1.getRowCount());

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonForwardMonth;
    private javax.swing.JButton jButtonForwardYear;
    private javax.swing.JButton jButtonbackMonth;
    private javax.swing.JButton jButtonbackYear;
    private javax.swing.JComboBox jComboBoxMonth;
    private javax.swing.JLabel jLabelYear;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
}

