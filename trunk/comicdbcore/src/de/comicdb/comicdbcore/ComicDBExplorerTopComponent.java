/**
 * ComicDB - overview you comics
 * Copyright (C) 2006  Daniel Moos
 *
 * This program is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free Software 
 * Foundation; either version 2 of the License, or (at your option) any later 
 * version.
 *
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with 
 * this program; if not, write to the Free Software Foundation, Inc., 51 Franklin 
 * St, Fifth Floor, Boston, MA 02110, USA
 */
package de.comicdb.comicdbcore;

import de.comicdb.comicdbcore.bean.ComicDB;
import de.comicdb.comicdbcore.bean.ComicDBChildren;
import de.comicdb.comicdbcore.bean.RootNode;
import java.io.Serializable;
import javax.swing.ActionMap;
import javax.swing.text.DefaultEditorKit;
import org.openide.ErrorManager;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
final class ComicDBExplorerTopComponent extends TopComponent implements ExplorerManager.Provider {
    
    private static final long serialVersionUID = 1L;
    
    private static ComicDBExplorerTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "de/comicdb/comicdbcore/cdb_16x16.png";
    
    private static final String PREFERRED_ID = "ComicDBExplorerTopComponent";
    
    private transient ExplorerManager explorerManager = new ExplorerManager();
    
    private ComicDBExplorerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ComicDBExplorerTopComponent.class, "CTL_ComicDBExplorerTopComponent"));
        setToolTipText(NbBundle.getMessage(ComicDBExplorerTopComponent.class, "HINT_ComicDBExplorerTopComponent"));
        setIcon(Utilities.loadImage(ICON_PATH, true));
        
        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));
        
        explorerManager.setRootContext(new RootNode(new ComicDBChildren(new ComicDB())));
        explorerManager.getRootContext().setDisplayName("new ComicDB");
        
        ActionMap map = getActionMap();
        map.put(DefaultEditorKit.copyAction, ExplorerUtils.actionCopy(explorerManager));
        map.put(DefaultEditorKit.cutAction, ExplorerUtils.actionCut(explorerManager));
        map.put(DefaultEditorKit.pasteAction, ExplorerUtils.actionPaste(explorerManager));
        map.put("delete", ExplorerUtils.actionDelete(explorerManager, true));
    }
    
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        comicpane = new BeanTreeView();

        setLayout(new java.awt.BorderLayout());

        add(comicpane, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane comicpane;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized ComicDBExplorerTopComponent getDefault() {
        if (instance == null) {
            instance = new ComicDBExplorerTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the ComicDBExplorerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ComicDBExplorerTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find ComicDBExplorer component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ComicDBExplorerTopComponent) {
            return (ComicDBExplorerTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
        // TODO add custom code on component opening
    }
    
    public void componentClosed() {
        // TODO add custom code on component closing
    }
    
    /** replaces this in object stream */
    public Object writeReplace() {
        return new ResolvableHelper();
    }
    
    protected String preferredID() {
        return PREFERRED_ID;
    }
    
    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            return ComicDBExplorerTopComponent.getDefault();
        }
    }
    
}
